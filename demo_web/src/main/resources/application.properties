#By design, the in-memory database is volatile, and results in data loss after application restart.
#We can change that behavior by using file-based storage.
# spring.datasource.url=jdbc:h2:file:/data/demo
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# H2 database has an embedded GUI console for browsing the contents of a database and running SQL queries.
# By default, the H2 console is not enabled in Spring.
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
# Disable remote access
#spring.h2.console.settings.web-allow-others=false

# This is to disable Hibernate automatic schema creation (as we plan to use schema.sql and data.sql)
spring.jpa.hibernate.ddl-auto=none
# OR set below to true to have both Hibernate automatic schema generation
# in conjugation with script-based schema creation and data population
#spring.jpa.defer-datasource-initialization=true

# script-based initialization is performed by default only for embedded databases
# To always initialize a database using scripts, we'll have to use
# POSSIBLE Values
# always: always initialize the database
# embedded: always initialize if an embedded database is in use. This is the default if the property value is not specified.
# never: never initialize the database
spring.sql.init.mode=always

# dump the queries to standard out
spring.jpa.show-sql=true
# To beautify or pretty print the SQL
spring.jpa.properties.hibernate.format_sql=true
